@page "/inventaire/saisie"
@using Blazorise.Components;
@using System.Globalization;
@using We.Louxor.InventaireArticle;
@using We.Louxor.InventaireArticle.Queries;
@inject IInventaireAppService appService;
@inherits LouxorComponentBase
<div class="container-fluid">
    @if (IsInitialized)
    {
        <div class="row mb-3">
            <div class="col-2">
                <label for="page" class="form-label">Page</label>
                <input type="number" min="1" class="form-control" id="page" placeholder="Page" @bind-value="Page">

            </div>
            <Divider Class="mt-2" />
        </div>
        <div class="row mb-3">
            <div class="col-4">
                <label class="form-label">Code Article</label>


                <Autocomplete TItem="string"
                          TValue="string"
                          Data="@Articles"
                          DebounceInterval=500
                          TextField="@(( item ) => item)"
                          ValueField="@(( item ) => item)"
                          @bind-SelectedValue="@article_selectedSearchValue"
                          @bind-SelectedText="article_selectedAutoCompleteText"
                          Placeholder="Code Article"
                          Filter="AutocompleteFilter.StartsWith"
                          FreeTyping=false
                          CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                </Autocomplete>

            </div>
            <div class="col-4">
                <label for="client" class="form-label">Client</label>
                <input class="form-control" id="client" placeholder="Client" @bind-value="Client">

            </div>
            <Divider Class="mt-2" />
        </div>
        <div class="row mb-3">
            <div class="col-4">
                <label class="form-label">Ordre de fabrication</label>
                <Autocomplete @ref="OfAutocomplete"
                          TItem="BrowseOrdreDeFabricationForCompletion"
                          TValue="int"
                          Data="@OrdresDeFabrication"
                          DebounceInterval=500
                          TextField="@(( item ) => item.Repr)"
                          ValueField="@(( item ) => item.Numero)"
                          Placeholder="Ordre de Fabrication"
                          Filter="AutocompleteFilter.StartsWith"
                          FreeTyping=false
                          CustomFilter="@(( item, searchValue ) => item.Numero.ToString().IndexOf( searchValue.Split('-')[0], 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                          SelectedValueChanged="@OnOrdreDeFabricationChanged">

                    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                </Autocomplete>
                @if (Operations.Count() == 1)
                {
                    <span>Operation Selectionnée: @Selected_Op</span>
                }
                else if (Operations.Count() > 1)
                {
                    @if (Selected_Op != null)
                    {
                        <span>Operation Selectionnée: @Selected_Op</span>

                    }
                    <table class="table table-hover table-bordered table-sm">
                        <tbody>
                            @foreach (var item in Operations)
                            {
                                <tr @onclick="@(e=>@onSelectOperationClicked(e,item))"><td>@item</td><td class="text-start"><Button Color="Color.Primary" Clicked="@(e=>@onSelectOperationClicked(e,item))" Visibility="@(Selected_Op==item?Visibility.Invisible:Visibility.Visible)">Select</Button></td></tr>
                            }
                        </tbody>
                    </table>
                }
                else if (Selected_Op != null)
                {
                    <span>Pas d'operation pour @Selected_Op</span>
                }

            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2">
                <label for="quantity" class="form-label">Quantité</label>
                <input type="number" min="0" class="form-control" id="quantity" placeholder="Quantité" @bind-value="Quantite">

            </div>
        </div>
        <div class="row mt-3 mb-3">
            <div class="col-12">
                <Button Block Outline Size="Size.Large" Color="Color.Primary" Clicked="@OnAddLineClicked">Ajouter</Button>
            </div>
        </div>
    }
    @if (Inventaires != null)
    {
        <div class="row mb-4">
            <div class="col-12 text-end ">
                <Paragraph>
                    <b>Valo Totale: @String.Format(new CultureInfo("fr-fr"), "{0:C}", Inventaires.Sum(x => x.ValoFinale))</b>
                </Paragraph>

            </div>
        </div>
        <div class="row mb-4">
            <Divider Class="mt-2" />
            <div class="col-12 text-center">
                <DataGrid TItem="ILigneInventaire"
                      Data="@Inventaires" Editable="true" ShowPager="true" PageSize="16">
                    <DataGridColumns>
                        <DataGridColumn Field="@nameof(ILigneInventaire.Page)" Caption="#" Sortable="true" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.Article)" Caption="Article" Sortable="true" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.Client)" Caption="Client" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.OrdreDeFabication)" Caption="Of" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.CodeOperationFinie)" Caption="Op" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.NumeroCommandeClient)" Caption="AR" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.Quantite)" Caption="Qté" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.PvArticleDeTete)" Caption="P.v tête" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.PuGamme)" Caption="Pu Gam." DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.PuNomenclature)" Caption="Pu Nomenc." DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.CtRevient)" Caption="Ct Revient" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" />
                        <DataGridColumn Field="@nameof(ILigneInventaire.ValoFinale)" Caption="Valo" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" />
                        <DataGridCommandColumn DeleteCommandAllowed="true" NewCommandAllowed="false" EditCommandAllowed="false" Caption="Supprimer">
                            <DeleteCommandTemplate>

                                <Button Color="Color.Primary" Clicked="@(e=>RemoveLigneInventaire(context))" class="fa fa-trash"></Button>

                            </DeleteCommandTemplate>
                        </DataGridCommandColumn>
                    </DataGridColumns>

                </DataGrid>
            </div>
        </div>
    }
</div>

@code {
    const string SOCIETE = "001";
    private bool IsInitialized = false;
    public IEnumerable<string> Articles;
    public List<BrowseOrdreDeFabricationForCompletion> OrdresDeFabrication = new();
    public List<int> Operations = new();
    public List<ILigneInventaire> Inventaires = new();
    //LigneInventaire Ligne = new();
    public string Client;
    public int Quantite;
    public int Page { get; set; } = 1;

    Autocomplete<BrowseOrdreDeFabricationForCompletion, int> OfAutocomplete;
    protected override async Task OnInitializedAsync()
    {
        Articles = (await appService.Browse(new BrowseArticleQuery() { Societe = SOCIETE })).Articles;
        var tmp_ofs = (await appService.Browse(new BrowseOrdreDeFabricationQuery() { Societe = SOCIETE })).Ofs;
        OrdresDeFabrication.AddRange(tmp_ofs);
        //OrdresDeFabrication = tmp_ofs.Select(x => x.ToString()).ToList();
        Inventaires = (await appService.GetListAsync(new BrowseLigneInventaireQuery() { Societe = SOCIETE })).Lignes;

        await base.OnInitializedAsync();
        IsInitialized = true;
    }
    public string article_selectedSearchValue { get; set; }
    public string article_selectedAutoCompleteText { get; set; }

    //public string of_selectedSearchValue { get; set; }
    public string of_selectedAutoCompleteText { get; set; }

    //public string operation_selectedSearchValue { get; set; }
    //public string operation_selectedAutoCompleteText { get; set; }


    protected int? Selected_Of = null;
    protected int? Selected_Op = null;

    async Task OnAddLineClicked()
    {
        // bool ok = Int32.TryParse(of_selectedSearchValue, out var of);
        // bool ok1 = Int32.TryParse(operation_selectedSearchValue, out var op);
        double qte = Quantite * 1.0;
        var resp = await appService.AddAsync(new AddLigneInventaireQuery() { Societe = SOCIETE, Article = article_selectedSearchValue, Client = Client, OrdreDeFabication = Selected_Of ?? 0, CodeOperationFinie = Selected_Op ?? 0, Quantite = qte, Page = Page });

        Inventaires.Add(resp.Ligne);
        //Ligne = new();
        article_selectedAutoCompleteText = string.Empty;
        article_selectedSearchValue = string.Empty;
        //of_selectedAutoCompleteText = string.Empty;
        //of_selectedSearchValue = string.Empty;
        Selected_Of = null;
        Selected_Op = null;
        //await OfAutocomplete.ResetSelected();
        of_selectedAutoCompleteText = "";
        Client = string.Empty;
        Quantite = 0;
        Operations.Clear();
        // StateHasChanged();

    }
    Task onSelectOperationClicked(EventArgs args, int op)
    {
        //operation_selectedSearchValue = op;
        Selected_Op = op;
        return Task.CompletedTask;
    }
    async Task OnOrdreDeFabricationChanged(int of)
    {
        //of_selectedSearchValue = args ?? string.Empty;
        //operation_selectedSearchValue = string.Empty;
        //if (!string.IsNullOrEmpty(of_selectedSearchValue))
        //{
        if (of > 0)
        {
            Operations.Clear();
            Operations.AddRange((await appService.Browse(new BrowseOperationPourOrdreDeFabricationQuery() { Societe = SOCIETE, OrdreDeFabrication = of })).Operations);
            if (Operations.Count() > 0)
            {
                Selected_Of = of;
                // operation_selectedSearchValue = Operations.First();
                Selected_Op = Operations.First();
            }

            // StateHasChanged();
        }
        //}
    }

    async Task RemoveLigneInventaire(DeleteCommandContext<ILigneInventaire> ctx)
    {
        var l = (LigneInventaire)ctx.Item;
        await appService.RemoveAsync(new RemoveLigneInventaireQuery() { Id = l.Id });
        Inventaires.Remove(l);
    }
}
